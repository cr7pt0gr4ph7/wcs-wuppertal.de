---
import { JsonLdRaw } from "./JsonLd";

type UrlLike = URL | string;

interface Props {
  disableJsonLd?: boolean;
  title?: string;
  name?: string;
  generator?: string;
  site?: {
    title?: string;
    tagline?: string;
    description?: string;
    logo?: UrlLike;
  };
  author?: {
    name?: string;
    twitter?: string;
    type?: "Organization" | "Person" | string;
    url?: UrlLike;
  };
  isHomepageOrAbout?: boolean;
  links?: UrlLike[];
  locale?: string;
  type?: "BlogPosting" | "CreativeWork" | "WebPage" | string;
  description?: string;
  canonicalUrl?: UrlLike;
  image?: {
    src: UrlLike;
    height?: string | number;
    width?: string | number;
    alt?: string;
  };
  publishingDate?: Date;
  modificationDate?: Date;
  pagination?: {
    number?: number;
    total?: number;
    prev?: UrlLike;
    next?: UrlLike;
  };
  social?: {
    name?: string;
    links?: UrlLike[];
    facebook?: {
      admins?: string;
      publisher?: string;
      appId?: string;
    };
    twitter?: {
      card?: string;
      username?: string;
    };
  };
  verification?: {
    google?: string;
    bing?: string;
    alexa?: string;
    yandex?: string;
    baidu?: string;
    facebook?: string;
  };
}

const {
  disableJsonLd = false,
  title: pageTitle,
  generator,
  name: pageName,
  type: pageType = "WebPage",
  site: {
    title: siteTitle,
    tagline: siteTagline,
    description: siteDescription,
    logo,
  } = {},
  author,
  isHomepageOrAbout,
  links,
  locale,
  description,
  canonicalUrl,
  image,
  publishingDate,
  modificationDate,
  pagination,
  social,
  verification,
} = Astro.props;

const validEntityTypes = ["BlogPosting", "CreativeWork", "WebPage"];
const validAuthorTypes = ["Organization", "Person"];

const title = (() => {
  const titleSeparator = " | ";
  const pageNumberSeparator = " ";
  const baseTitle = (() => {
    if (siteTitle && pageTitle != siteTitle) {
      return pageTitle + titleSeparator + siteTitle;
    } else if ((siteDescription || siteTagline) && siteTitle) {
      return siteTitle + titleSeparator + (siteTagline ?? siteDescription);
    } else {
      return pageTitle ?? siteTitle;
    }
  })();

  if (pagination?.number) {
    return pagination.number + pageNumberSeparator + baseTitle;
  }
  return baseTitle;
})();

const name =
  pageName ??
  pageTitle ??
  (!isHomepageOrAbout ? undefined : (social?.name ?? siteTitle));

const jsonData = {
  "@type": pageType,
  name: title,
  description: description,
  url: canonicalUrl,
  headline: pageTitle,
  dateModified: modificationDate ?? publishingDate,
  datePublished: publishingDate,
  sameAs: links ?? (isHomepageOrAbout ? social?.links : undefined),
  logo: logo,
  get author() {
    if (!author?.name) {
      // No author specified
      return undefined;
    }

    if (
      author.type &&
      !validAuthorTypes.some((validType) => validType == author.type)
    ) {
      // Author type is invalid
      return undefined;
    }

    return {
      "@type": author.type ?? "Person",
      name: author.name,
      url: author.url,
    };
  },
  get image() {
    if (!image?.src) {
      // No image specified
      return undefined;
    }

    if (!image.width && !image.height && !image.alt) {
      // Use shorthand if only path is specified
      return image.src;
    }

    return {
      "@type": "ImageObject",
      src: image.src,
      width: image.width,
      height: image.height,
      alt: image.alt,
    };
  },
  get publisher() {
    if (!logo) {
      return undefined;
    }

    return {
      "@type": "Organization",
      logo: {
        "@type": "ImageObject",
        url: logo,
      },
      name: author?.name,
    };
  },
  get mainEntityOfPage() {
    if (
      !pageType ||
      !canonicalUrl ||
      !validEntityTypes.some((validType) => validType == pageType)
    ) {
      return undefined;
    }

    return {
      "@type": "WebPage",
      "@id": canonicalUrl,
    };
  },
};
---

{title && <title>{title}</title>}

{generator && <meta name="generator" content={generator} />}

{pageTitle && <meta property="og:title" content={pageTitle} />}
{author?.name && <meta name="author" content={author.name} />}
{locale && <meta property="og:locale" content={locale} />}

{description && <meta name="description" content={description} />}
{description && <meta property="og:description" content={description} />}
{description && <meta property="twitter:description" content={description} />}

{canonicalUrl && <link rel="canonical" href={canonicalUrl} />}
{canonicalUrl && <meta property="og:url" content={canonicalUrl} />}

{siteTitle && <meta property="og:site_name" content={siteTitle} />}

{
  image && (
    <>
      <meta property="og:image" content={image.src} />
      {image.height && (
        <meta property="og:image:height" content={image.height.toString()} />
      )}
      {image.width && (
        <meta property="og:image:width" content={image.width.toString()} />
      )}
      {image.alt && <meta property="og:image:alt" content={image.alt} />}
    </>
  )
}

{
  publishingDate ? (
    <>
      <meta property="og:type" content="article" />
      <meta
        property="article:published_time"
        content={publishingDate?.toISOString()}
      />
    </>
  ) : (
    <meta property="og:type" content="website" />
  )
}

{pagination?.prev && <link rel="prev" href={pagination.prev} />}
{pagination?.next && <link rel="next" href={pagination.next} />}

{
  image ? (
    <>
      <meta
        name="twitter:card"
        content={social?.twitter?.card ?? "summary_large_image"}
      />
      <meta property="twitter:image" content={image?.src} />
    </>
  ) : (
    <meta name="twitter:card" content="summary" />
  )
}

{image?.alt && <meta name="twitter:image:alt" content={image.alt} />}

{pageTitle && <meta property="twitter:title" content={pageTitle} />}

{
  social?.twitter?.username && (
    <>
      <meta name="twitter:site" content={"@" + social.twitter.username} />
      {author?.twitter && (
        <meta name="twitter:creator" content={"@" + author?.twitter} />
      )}
    </>
  )
}

{
  social?.facebook && (
    <>
      {social.facebook.admins && (
        <meta property="fb:admins" content={social.facebook.admins} />
      )}
      {social.facebook.publisher && (
        <meta
          property="article:publisher"
          content={social.facebook.publisher}
        />
      )}
      {social.facebook.appId && (
        <meta property="fb:app_id" content={social.facebook.appId} />
      )}
    </>
  )
}

{
  verification?.google && (
    <meta name="google-site-verification" content={verification.google} />
  )
}
{
  verification?.bing && (
    <meta name="msvalidate.01" content={verification.bing} />
  )
}
{
  verification?.alexa && (
    <meta name="alexaVerifyID" content={verification.alexa} />
  )
}
{
  verification?.yandex && (
    <meta name="yandex-verification" content={verification.yandex} />
  )
}
{
  verification?.baidu && (
    <meta name="baidu-site-verification" content={verification.baidu} />
  )
}
{
  verification?.facebook && (
    <meta name="facebook-domain-verification" content={verification.facebook} />
  )
}

{
  !disableJsonLd && (
    <script
      type="application/ld+json"
      is:inline
      set:html={JsonLdRaw(jsonData, undefined)}
    />
  )
}

---
import { getCollection, type InferEntrySchema } from "astro:content";

type ItemType = keyof InferEntrySchema<"calendar">["type"];

interface Props {
  types?: ItemType[];
}

const { types } = Astro.props;

const entries = await getCollection("calendar", ({ data: { type } }) => {
  return (
    !types ||
    types.some(
      (t) =>
        // @ts-ignore
        !!type[t],
    )
  );
});
---

<div class="table">
  <div class="thead"></div>
  <div class="tbody">
    <details class="tr-parent" open>
      <summary class="tr primary">
        <div class="td name">WCS Level 1 &amp; 2</div>
        <div class="td dates">
          12.01.2025 <span class="additional-dates"
            >+ <span>5 weitere Starttermine</span></span
          >
        </div>
        <div class="td location">ADTV Tanzschule Sch√§fer-Koch</div>
        <div class="td link"><a href="#">Anmelden</a></div>
      </summary>
      <div class="expander">
        <div class="extended">
          <div class="description">
            Lorem ipsum, dolor sit amet, and some more words to fill this space
            with some sort of vaguely meaningful text. This is just here to test
            the layout, so congratulations for reading a text that does not mean
            anything.
          </div>
        </div>
        <div class="sub-table"></div>
      </div>
    </details>
    <div class="tr primary">
      <div class="td name">WCS Level 1</div>
      <div class="td dates">
        12.01.2025 <span class="additional-dates"
          >+ <span>5 weitere Starttermine</span></span
        >
      </div>
      <div class="td location">BUW UniSport</div>
      <div class="td link"><a href="#">Anmelden</a></div>
    </div>
    <!-- {
      entries.map((entry) => {
        return (
          <tr>
            <td>{entry.data.name}</td>
            <td><a href={entry.data.url}>Anmeldung</a></td>
          </tr>
        );
      })
    } -->
  </div>
</div>

<style>
  .table {
    font-size: 1.5rem;
    line-height: 45px;
  }

  tr {
    background-color: #a3a3a3;
    color: #000000;
  }

  td {
    border: none;
    padding-inline: calc((45px - 1.5rem) / 2);
  }

  .additional-dates {
    /* display: inline-block; */
    background-color: #171717;
    border-radius: 1.5rem;
    padding-left: 0.75rem;
    padding-right: 1rem;
    font-weight: 400;
    font-size: 1rem;
    line-height: calc(28 * 1rem / 16);
    padding-top: calc(5 * 1rem / 16);
    padding-bottom: calc(4 * 1rem / 16);
    position: relative;
    bottom: calc(1 * 1rem / 16);
  }

  .tr.primary {
    cursor: pointer;
  }

  .description {
    font-size: 1.25rem;
    line-height: 1.5;
    font-weight: 400;
  }

  .name,
  .date,
  .dates,
  .time,
  .times,
  .location,
  .link,
  .description,
  *[data-column-name] {
    --indent: 0.5rem;
    margin-left: var(--indent);
  }

  *[data-column-name]::before {
    content: attr(data-column-name);
  }

  .name::before {
    content: "Kurs";
  }
  .date::before,
  .dates::before {
    content: "Datum";
    content: "Datum";
  }
  .time::before,
  .times::before {
    content: "Uhrzeit";
  }
  .location::before {
    content: "Ort";
  }
  .link::before {
    content: "";
  }
  .description::before {
    content: "Beschreibung";
  }

  .name::before {
    content: "Was?";
  }
  .date::before,
  .dates::before {
    content: "Wann?";
  }
  .time::before,
  .times::before {
    content: "";
  }
  .location::before {
    content: "Wer?";
  }

  *[data-column-name]::before,
  .name::before,
  .date::before,
  .dates::before,
  .time::before,
  .times::before,
  .location::before,
  .link::before,
  .description::before {
    display: block;
    font-weight: 800;
    font-size: 14px;
    line-height: 1rem;
    margin-left: calc(-1 * var(--indent));
  }

  @media (min-width: 1120px) {
    .tr {
      display: flex;
    }

    .td {
      flex-grow: 1;
    }

    .td::before {
      content: none !important;
    }

    .name,
    .date,
    .dates,
    .time,
    .times,
    .location,
    .link {
      --indent: 0px;
    }
  }
</style>

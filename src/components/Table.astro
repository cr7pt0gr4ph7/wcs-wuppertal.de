---
import { Picture } from "astro:assets";
import { getCollection, type InferEntrySchema } from "astro:content";
import { Temporal } from "temporal-polyfill";
import { hyphenate } from "../utils/hyphenate.ts";
import { toImageProps } from "../utils/images";
import { parseImageObject } from "../utils/model";

type ItemType = keyof InferEntrySchema<"calendar">["type"];

interface Props {
  types?: ItemType[];
}

const { types } = Astro.props;

const entries = await getCollection("calendar", ({ data: { type } }) => {
  return (
    !types ||
    types.some(
      (t) =>
        // @ts-ignore
        !!type[t],
    )
  );
});

const myDateFormatOpts: Intl.DateTimeFormatOptions = {
  month: "2-digit",
  day: "2-digit",
  year: "numeric",
};

const myWeekdayFormatOpts: Intl.DateTimeFormatOptions = {
  weekday: "long",
};

const myTimeFormatOpts: Intl.DateTimeFormatOptions = {
  hour: "2-digit",
  minute: "2-digit",
};

const formatDate = (
  date: Temporal.PlainDate | Temporal.PlainDateTime | Temporal.ZonedDateTime,
) => {
  return date.toLocaleString("de-DE", myDateFormatOpts);
};

const formatWeekdayAndTime = (
  date: Temporal.PlainDateTime | Temporal.ZonedDateTime,
) => {
  return (
    date.toLocaleString("de-DE", myWeekdayFormatOpts) +
    " " +
    date.toLocaleString("de-DE", myTimeFormatOpts) +
    " Uhr"
  );
};

const formatDateTime = (
  date: Temporal.PlainDateTime | Temporal.ZonedDateTime,
) => {
  return (
    date.toLocaleString("de-DE", myDateFormatOpts) +
    " " +
    date.toLocaleString("de-DE", myTimeFormatOpts) +
    " Uhr"
  );
};

interface BaseRowData {
  image?: string | { src: string; alt?: string };
  title: string;
  subtitle?: string;
  date: Temporal.ZonedDateTime;
  dates?: Temporal.ZonedDateTime[];
  location: string;
  url?: string;
  type: InferEntrySchema<"calendar">["type"];
}

interface RowData extends BaseRowData {
  children?: BaseRowData[];
  groups?: {
    title: string;
    children?: BaseRowData[];
  }[];
}

const sortByDate = <T extends BaseRowData>(entries: T[]) => {
  return entries.toSorted((a, b) =>
    Temporal.ZonedDateTime.compare(a.date, b.date),
  );
};

type Columns = Record<string, { format: (entry: RowData) => any }>;
---

{
  (() => {
    const formatDates = (
      dates: (Temporal.PlainDateTime | Temporal.ZonedDateTime)[],
    ) => {
      if (dates.length < 1) {
        return null;
      }
      return (
        <>
          {formatWeekdayAndTime(dates[0])}
          {dates.map((date) => (
            <>
              <br />
              {"ab " + formatDate(date)}
            </>
          ))}
        </>
      );
    };

    const columns = {
      name: {
        format: (entry: RowData) => {
          let imageProps = toImageProps(parseImageObject(entry.image));
          return (
            <div class="td name">
              {imageProps ? (
                <Picture class="teaser-image" {...imageProps} />
              ) : null}
              {entry.subtitle ? (
                <div class="title-box">
                  <div class="title">{hyphenate(entry.title)}</div>
                  <div class="subtitle">{hyphenate(entry.subtitle)}</div>
                </div>
              ) : (
                <div class="title-box">{hyphenate(entry.title)}</div>
              )}
            </div>
          );
        },
      },
      dates: {
        format: (entry: RowData) =>
          !entry.children && !entry.groups ? (
            <div class="td dates">
              {entry.dates
                ? formatDates(entry.dates)
                : formatDateTime(entry.date)}
            </div>
          ) : (
            <div class="td dates">
              {formatDate(entry.date)}{" "}
              <span class="additional-dates">
                {"+ "}
                <span>
                  {(entry.children?.length ?? 0) +
                    (entry.groups?.reduce(
                      (acc, item) => acc + (item.children?.length ?? 0),
                      0,
                    ) ?? 0) -
                    1}
                  <span class="if-large-viewport">
                    {entry.children?.length === 2
                      ? entry.type?.regular_course
                        ? " weiterer Starttermin"
                        : " weiterer Termin"
                      : entry.type?.regular_course
                        ? " weitere Starttermine"
                        : " weitere Termine"}
                  </span>
                </span>
              </span>
            </div>
          ),
      },
      location: {
        format: (entry: RowData) => (
          <div class="td location">{hyphenate(entry.location)}</div>
        ),
      },
      link: {
        format: (entry: RowData) => {
          const registrationNeeded =
            types?.some(
              (eventType) => entry.type[eventType]?.requires_registration,
            ) ?? false;

          const forceMoreInfos =
            types?.some((eventType) => entry.type[eventType]?.more_infos) ??
            false;

          const additionalText =
            types?.map(
              (eventType) => entry.type[eventType]?.additional_text,
            ).filter(text => text).at(0) ?? "";

          let children = [];
          if ((!registrationNeeded || forceMoreInfos) && entry.url) {
            children.push(<a href={entry.url}>Mehr Infos</a>);
          }
          if (registrationNeeded && entry.url) {
            if (children.length > 0) {
              children.push(" | ");
            }
            children.push(<a href={entry.url}>Anmelden</a>);
          }
          if (registrationNeeded && !entry.url) {
            if (children.length > 0) {
              children.push(" | ");
            }
            children.push(<span>Anmeldung erforderlich</span>);
          } else {
            if (children.length > 0) {
              children.push(" | ");
            }
            children.push(
              <span>
                {registrationNeeded
                  ? "Anmeldung erforderlich"
                  : "Keine Anmeldung erforderlich"}
              </span>,
            );
          }
          if (additionalText) {
            if (children.length > 0) {
              children.push(" | ");
            }
            children.push(<span>{additionalText}</span>);
          }

          return (
            <div class="td link">{children}</div>
          );
        },
      },
    } satisfies Columns;

    const formatRowContent = (entry: RowData) => (
      <>
        {columns.name.format(entry)}
        {columns.dates.format(entry)}
        {columns.location.format(entry)}
        {columns.link.format(entry)}
      </>
    );

    const formatRow = (entry: RowData) => {
      return <div class="tr primary">{formatRowContent(entry)}</div>;
    };

    return (
      <div class="table">
        <div class="thead" />
        <div class="tbody">
          {sortByDate(entries.map((entry) => entry.data)).map((entry) => {
            if (!entry.children && !entry.groups) {
              return <div class="tr primary">{formatRowContent(entry)}</div>;
            } else {
              return (
                <div class="tr-parent">
                  <details>
                    <summary class="tr primary">
                      {formatRowContent(entry)}
                    </summary>
                  </details>
                  <div class="expander">
                    <div class="sub-table">
                      {sortByDate(entry.children ?? []).map((child) => (
                        <div class="tr">{formatRowContent(child)}</div>
                      ))}
                      {(entry.groups ?? []).map((group) => {
                        return (
                          <div class="group">
                            <div class="group-header tr">{group.title}</div>
                            {sortByDate(group.children ?? []).map((child) => (
                              <div class="tr">{formatRowContent(child)}</div>
                            ))}
                          </div>
                        );
                      })}
                    </div>
                  </div>
                </div>
              );
            }
          })}
        </div>
      </div>
    );
  })()
}

<style>
  .table {
    border-radius: var(--table-border-radius);
  }

  .table > .tbody > .tr-parent:first-child .tr.primary,
  .table > .tbody > .tr.primary:first-child {
    border-top-left-radius: var(--table-border-radius);
    border-top-right-radius: var(--table-border-radius);
  }

  .table > .tbody > .tr-parent:last-child .tr.primary,
  .table > .tbody > .tr.primary:last-child {
    border-bottom-left-radius: var(--table-border-radius);
    border-bottom-right-radius: var(--table-border-radius);
  }
</style>

<style>
  .group-header {
    font-size: 1.5rem;
    line-height: 1;
    font-weight: 400;
    /* /* margin-top: 0.75rem;
    margin-bottom: 0.5rem; */

    padding-top: calc((3rem - 1em) / 2);
    padding-bottom: calc((3rem - 1em) / 2);
    color: var(--primary-subdued);
    /* padding-left: calc(2rem + var(--table-border-width)); */
    display: none !important;
  }

  .group .tr {
    /* padding-left: 3rem; */
    font-size: 1.4rem;
    padding-top: calc((3rem - 1.25em) / 2);
    padding-bottom: calc((3rem - 1.25em) / 2);
  }

  .group {
    margin-top: 0.125rem;
    margin-bottom: 0.125rem;
  }

  .group .tr .name {
    font-weight: 350;
  }

  .group .group-header + .tr .name {
    font-weight: 500;
  }

  /* -- */

  details + .expander {
    display: none;
    margin-bottom: 0.25rem;
  }

  details[open] + .expander {
    display: grid;
  }

  /* -- */

  .table a,
  .table a:active,
  .table a:visited,
  .table a:target {
    color: inherit;
    font-weight: 700;
    text-decoration: underline;
    text-decoration-color: var(--table-color-underline);
    text-decoration-thickness: 1px;
    text-underline-offset: 2px;
  }

  .link span {
    font-weight: 300;
    font-style: italic;
    font-size: 1rem;
    line-height: calc(0.5 * 1.5 * 1.5rem);
    color: var(--secondary-subdued);
  }

  .tr:hover link span {
    color: #808080;
  }

  .table a:hover,
  .table a:focus {
    text-decoration: underline;
    text-decoration-color: var(--table-color);
    text-decoration-thickness: auto;
    text-underline-offset: auto;
  }

  .table {
    font-size: 1.5rem;
    line-height: 1.25;
    margin-bottom: 3rem;
    margin-top: -3px;
  }

  .tr {
    margin-top: 3px;
    background-color: var(--table-background);
    color: var(--table-color);
    border: var(--table-border);
    padding-top: calc((4rem - 1.25 * 1em) / 2);
    padding-bottom: calc((4rem - 1.25 * 1em) / 2);
  }

  .tr:hover {
    background-color: var(--table-background-hover);
    color: var(--table-color-hover);
    border: var(--table-border-hover);
  }

  .tr {
    padding-left: 2rem;
    padding-right: 2rem;
  }

  /* -- */

  .additional-dates {
    background-color: var(--pill-background);
    color: var(--pill-color);
    border-radius: 1.5rem;
    padding-left: 0.75rem;
    padding-right: 1rem;
    font-weight: 400;
    font-size: 1rem;
    line-height: calc(28 * 1rem / 16);
    padding-top: calc(5 * 1rem / 16);
    padding-bottom: calc(4 * 1rem / 16);
    position: relative;
    bottom: calc(1 * 1rem / 16);
    text-wrap: nowrap;
    /* word-break: break-all; */ /* "word-wrap: break-all" causes line breaks at unintended positions in Firefox 136 */
  }

  .tr:hover .additional-dates {
    background-color: var(--pill-background-hover);
    color: var(--pill-color-hover);
  }

  /* -- */

  .tr-parent {
    cursor: pointer;
  }

  /* -- */

  .description {
    font-size: 1.25rem;
    line-height: 1.5;
    font-weight: 400;
  }

  .name {
    font-weight: 450;
    color: var(--table-color-highlight);
  }

  .name .title {
    font-weight: 500;
    color: var(--table-color-highlight);
  }

  .name .subtitle {
    font-weight: 400;
    color: var(--table-color);
  }

  .name,
  .date,
  .dates,
  .time,
  .times,
  .location,
  .link,
  .description,
  *[data-column-name] {
    --indent: 0.5rem;
    margin-left: var(--indent);
  }

  *[data-column-name]::before {
    content: attr(data-column-name);
  }

  .name::before {
    content: "Kurs";
  }
  .date::before,
  .dates::before {
    content: "Datum";
    content: "Datum";
  }
  .time::before,
  .times::before {
    content: "Uhrzeit";
  }
  .location::before {
    content: "Ort";
  }
  .link::before {
    content: "";
  }
  .description::before {
    content: "Beschreibung";
  }

  .name::before {
    content: "Was?";
  }
  .date::before,
  .dates::before {
    content: "Wann?";
  }
  .time::before,
  .times::before {
    content: "";
  }
  .location::before {
    content: "Wer?";
  }

  *[data-column-name]::before,
  .name::before,
  .date::before,
  .dates::before,
  .time::before,
  .times::before,
  .location::before,
  .link::before,
  .description::before {
    display: block;
    font-weight: 800;
    font-size: 14px;
    line-height: 40px;
    margin-left: calc(-1 * var(--indent));
  }

  .if-small-viewport {
    display: none;
    font-size: 1.25rem;
    position: relative;
    top: 0.15em;
  }

  .if-large-viewport {
    display: none;
  }

  @media (min-width: 1120px) {
    .if-small-viewport {
      display: none;
    }

    .if-large-viewport {
      display: inline;
    }
  }

  .link {
    margin-top: 8px;
  }

  .name Picture {
    float: right;
    max-width: 200px;
    position: relative;
    top: -40px;
  }

  .name::after {
    content: "";
    clear: botH;
  }

  @media (min-width: 900px) {
    .name {
      display: flex;
      flex-direction: row;
    }

    .name Picture {
      max-width: 160px;
      margin-left: -0.5em;
      margin-right: 1em;
      align-self: center;
    }

    .name Picture img {
      box-shadow: 2px 2px 8px black;
    }

    .name Picture {
      filter: saturate(10%) brightness(50%);
      transition: filter 0.4s ease-in;
      position: static;
    }

    .table:hover .name Picture {
      transition: filter 1s ease-in;
    }

    .tr:hover .name Picture {
      filter: saturate(100%);
      transition: filter 0.3s ease-in;
    }

    /* -- */

    .table,
    .table details summary.tr {
      display: grid;
      grid-template-columns:
        [start name name-start] 18fr
        [datetime datetime-start name-end] 11fr
        [location location-start datetime-end] 13fr
        [link link-start location-end] 8fr
        [end link-end];
    }

    .table details summary.tr {
      padding-left: 0;
      padding-right: 0;
    }
    .table details summary.tr > .td:first-child {
      padding-left: 2rem;
    }
    .table details summary.tr > .td:last-child {
      padding-right: 2rem;
    }

    .name {
      grid-column: name;
    }
    .dates {
      grid-column: datetime;
    }
    .date {
      grid-column: datetime;
    }
    .time,
    .times {
      grid-column: datetime;
    }
    .location {
      grid-column: location;
    }
    .link {
      grid-column: link;
      margin-top: 0;
    }
    .description {
      grid-column: start / end;
    }

    .tbody,
    .thead,
    .tr-parent,
    .tr,
    .expander,
    .extended,
    .sub-table,
    .group,
    .group-header,
    details,
    summary {
      grid-column: start / end;
      display: grid;
      grid-template-columns: subgrid;
    }

    .td::before {
      content: none !important;
    }

    .name,
    .date,
    .dates,
    .time,
    .times,
    .location,
    .link {
      --indent: 0px;
      padding-right: 0.5em;
    }
  }

  /** -- */

  .sub-table {
    font-weight: 300;
    /* font-size: 1.25rem; */
  }
</style>

---
import { getCollection, type InferEntrySchema } from "astro:content";
import { Temporal } from "temporal-polyfill";
import { hyphenate } from "../utils/hyphenate.ts";

type ItemType = keyof InferEntrySchema<"calendar">["type"];

interface Props {
  types?: ItemType[];
}

const { types } = Astro.props;

const entries = await getCollection("calendar", ({ data: { type } }) => {
  return (
    !types ||
    types.some(
      (t) =>
        // @ts-ignore
        !!type[t],
    )
  );
});

const myDateFormatOpts: Intl.DateTimeFormatOptions = {
  month: "2-digit",
  day: "2-digit",
  year: "numeric",
};

const myTimeFormatOpts: Intl.DateTimeFormatOptions = {
  hour: "2-digit",
  minute: "2-digit",
};

const formatDate = (
  date: Temporal.PlainDate | Temporal.PlainDateTime | Temporal.ZonedDateTime,
) => {
  return date.toLocaleString("de-DE", myDateFormatOpts);
};

const formatDateTime = (
  date: Temporal.PlainDateTime | Temporal.ZonedDateTime,
) => {
  return (
    date.toLocaleString("de-DE", myDateFormatOpts) +
    " " +
    date.toLocaleString("de-DE", myTimeFormatOpts) +
    " Uhr"
  );
};

type RowData = {
  title: string;
  subtitle?: string;
  date: Temporal.ZonedDateTime;
  location: string;
  url?: string;
  type: InferEntrySchema<"calendar">["type"];
};

const formatRow = (entry: RowData) => {
  return <div class="tr primary">{formatRowContent(entry)}</div>;
};

const formatRowContent = (entry: RowData) => {
  const title = hyphenate(entry.title);
  const subtitle = entry.subtitle && hyphenate(entry.subtitle);
  const location = hyphenate(entry.location);

  return (
    <>
      <div class="td name">
        {" "}
        {subtitle ? (
          <>
            <div class="title">{title}</div>
            <div class="subtitle">{subtitle}</div>
          </>
        ) : (
          title
        )}
      </div>
      <div class="td dates">{formatDateTime(entry.date)}</div>
      <div class="td location">{location}</div>
      <div class="td link">
        {entry.url ? (
          (types?.some(
            (eventType) => entry.type[eventType]?.requires_registration,
          ) ?? false) ? (
            <>
              <a href={entry.url}>Anmelden</a>
            </>
          ) : (
            <>
              <a href={entry.url}>Mehr Infos</a>
              {" | "}
              <span>Keine Anmeldung erforderlich</span>
            </>
          )
        ) : (types?.some(
            (eventType) => entry.type[eventType]?.requires_registration,
          ) ?? false) ? (
          "Anmeldung erforderlich"
        ) : (
          <span>Keine Anmeldung erforderlich</span>
        )}
      </div>
    </>
  );
};
---

<div class="table">
  <div class="thead"></div>
  <div class="tbody">
    {
      entries
        .toSorted((a, b) =>
          Temporal.ZonedDateTime.compare(a.data.date, b.data.date),
        )
        .map((entry) => {
          const title = hyphenate(entry.data.title);
          const subtitle =
            entry.data.subtitle && hyphenate(entry.data.subtitle);
          const location = hyphenate(entry.data.location);

          if (entry.data.children || entry.data.groups) {
            return (
              <div class="tr-parent">
                <details>
                  <summary class="tr primary">
                    <div class="td name">
                      {subtitle ? (
                        <>
                          <div class="title">{title}</div>
                          <div class="subtitle">{subtitle}</div>
                        </>
                      ) : (
                        title
                      )}
                    </div>
                    <div class="td dates">
                      {formatDate(entry.data.date)}{" "}
                      <span class="additional-dates">
                        {"+ "}
                        <span>
                          {(entry.data.children?.length ?? 0) +
                            (entry.data.groups?.reduce(
                              (acc, item) => acc + (item.children?.length ?? 0),
                              0,
                            ) ?? 0) -
                            1}
                          <span class="if-large-viewport">
                            {" weitere Starttermine"}
                          </span>
                        </span>
                      </span>
                    </div>
                    <div class="td location">{location}</div>
                    <div class="td link">
                      {entry.data.url ? (
                        (types?.some(
                          (eventType) =>
                            entry.data.type[eventType]?.requires_registration,
                        ) ?? false) ? (
                          <>
                            <a href={entry.data.url}>Anmelden</a>
                          </>
                        ) : (
                          <>
                            <a href={entry.data.url}>Mehr Infos</a>
                            {" | "}
                            <span>Keine Anmeldung erforderlich</span>
                          </>
                        )
                      ) : (types?.some(
                          (eventType) =>
                            entry.data.type[eventType]?.requires_registration,
                        ) ?? false) ? (
                        "Anmeldung erforderlich"
                      ) : (
                        <span>Keine Anmeldung erforderlich</span>
                      )}
                    </div>
                  </summary>
                </details>
                <div class="expander">
                  <div class="sub-table">
                    {(entry.data.children ?? [])
                      .toSorted((a, b) =>
                        Temporal.ZonedDateTime.compare(a.date, b.date),
                      )
                      .map((child) => {
                        const title = hyphenate(child.title);
                        const subtitle =
                          child.subtitle && hyphenate(child.subtitle);
                        const location = hyphenate(child.location);

                        return (
                          <div class="tr">
                            <div class="td name">
                              {subtitle ? (
                                <>
                                  <div class="title">{title}</div>
                                  <div class="subtitle">{subtitle}</div>
                                </>
                              ) : (
                                title
                              )}
                            </div>
                            <div class="td dates">
                              {formatDateTime(child.date)}
                            </div>
                            <div class="td location">{location}</div>
                            <div class="td link">
                              {child.url ? (
                                (types?.some(
                                  (eventType) =>
                                    child.type[eventType]
                                      ?.requires_registration,
                                ) ?? false) ? (
                                  <>
                                    <a href={child.url}>Anmelden</a>
                                  </>
                                ) : (
                                  <>
                                    <a href={child.url}>Mehr Infos</a>
                                    {" | "}
                                    <span>Keine Anmeldung erforderlich</span>
                                  </>
                                )
                              ) : (types?.some(
                                  (eventType) =>
                                    child.type[eventType]
                                      ?.requires_registration,
                                ) ?? false) ? (
                                "Anmeldung erforderlich"
                              ) : (
                                <span>Keine Anmeldung erforderlich</span>
                              )}
                            </div>
                          </div>
                        );
                      })}
                    {(entry.data.groups ?? []).map((group) => {
                      return (
                        <div class="group">
                          <div class="group-header tr">{group.title}</div>
                          {(group.children ?? [])
                            .toSorted((a, b) =>
                              Temporal.ZonedDateTime.compare(a.date, b.date),
                            )
                            .map((child) => {
                              const title = hyphenate(child.title);
                              const subtitle =
                                child.subtitle && hyphenate(child.subtitle);
                              const location = hyphenate(child.location);

                              return (
                                <div class="tr">
                                  <div class="td name">
                                    {subtitle ? (
                                      <>
                                        <div class="title">{title}</div>
                                        <div class="subtitle">{subtitle}</div>
                                      </>
                                    ) : (
                                      title
                                    )}
                                  </div>
                                  <div class="td dates">
                                    {formatDateTime(child.date)}
                                  </div>
                                  <div class="td location">{location}</div>
                                  <div class="td link">
                                    {child.url ? (
                                      (types?.some(
                                        (eventType) =>
                                          child.type[eventType]
                                            ?.requires_registration,
                                      ) ?? false) ? (
                                        <>
                                          <a href={child.url}>Anmelden</a>
                                        </>
                                      ) : (
                                        <>
                                          <a href={child.url}>Mehr Infos</a>
                                          {" | "}
                                          <span>
                                            Keine Anmeldung erforderlich
                                          </span>
                                        </>
                                      )
                                    ) : (types?.some(
                                        (eventType) =>
                                          child.type[eventType]
                                            ?.requires_registration,
                                      ) ?? false) ? (
                                      "Anmeldung erforderlich"
                                    ) : (
                                      <span>Keine Anmeldung erforderlich</span>
                                    )}
                                  </div>
                                </div>
                              );
                            })}
                        </div>
                      );
                    })}
                  </div>
                </div>
              </div>
            );
          } else {
            return formatRow(entry.data);
          }
        })
    }
  </div>
</div>

<style>
  .table {
    border-radius: var(--table-border-radius);
  }

  .table > .tbody > .tr-parent:first-child .tr.primary,
  .table > .tbody > .tr.primary:first-child {
    border-top-left-radius: var(--table-border-radius);
    border-top-right-radius: var(--table-border-radius);
  }

  .table > .tbody > .tr-parent:last-child .tr.primary,
  .table > .tbody > .tr.primary:last-child {
    border-bottom-left-radius: var(--table-border-radius);
    border-bottom-right-radius: var(--table-border-radius);
  }
</style>

<style>
  .group-header {
    font-size: 1.5rem;
    line-height: 1;
    font-weight: 400;
    /* /* margin-top: 0.75rem;
    margin-bottom: 0.5rem; */

    padding-top: calc((3rem - 1em) / 2);
    padding-bottom: calc((3rem - 1em) / 2);
    color: var(--primary-subdued);
    /* padding-left: calc(2rem + var(--table-border-width)); */
    display: none !important;
  }

  .group .tr {
    /* padding-left: 3rem; */
    font-size: 1.4rem;
    padding-top: calc((3rem - 1.25em) / 2);
    padding-bottom: calc((3rem - 1.25em) / 2);
  }

  .group {
    margin-top: 0.125rem;
    margin-bottom: 0.125rem;
  }

  .group .tr .name {
    font-weight: 350;
  }

  .group .group-header + .tr .name {
    font-weight: 500;
  }

  /* -- */

  details + .expander {
    display: none;
    margin-bottom: 0.25rem;
  }

  details[open] + .expander {
    display: grid;
  }

  /* -- */

  .table a,
  .table a:active,
  .table a:visited,
  .table a:target {
    color: inherit;
    font-weight: 700;
    text-decoration: underline;
    text-decoration-color: var(--table-color-underline);
    text-decoration-thickness: 1px;
    text-underline-offset: 2px;
  }

  .link span {
    font-weight: 300;
    font-style: italic;
    font-size: 1rem;
    line-height: calc(0.5 * 1.5 * 1.5rem);
    color: var(--secondary-subdued);
  }

  .tr:hover link span {
    color: #808080;
  }

  .table a:hover,
  .table a:focus {
    text-decoration: underline;
    text-decoration-color: var(--table-color);
    text-decoration-thickness: auto;
    text-underline-offset: auto;
  }

  .table {
    font-size: 1.5rem;
    line-height: 1.25;
    margin-bottom: 3rem;
    margin-top: -3px;
  }

  .tr {
    margin-top: 3px;
    background-color: var(--table-background);
    color: var(--table-color);
    border: var(--table-border);
    padding-top: calc((4rem - 1.25 * 1em) / 2);
    padding-bottom: calc((4rem - 1.25 * 1em) / 2);
  }

  .tr:hover {
    background-color: var(--table-background-hover);
    color: var(--table-color-hover);
    border: var(--table-border-hover);
  }

  .tr {
    padding-left: 2rem;
    padding-right: 2rem;
  }

  /* -- */

  .additional-dates {
    background-color: var(--pill-background);
    color: var(--pill-color);
    border-radius: 1.5rem;
    padding-left: 0.75rem;
    padding-right: 1rem;
    font-weight: 400;
    font-size: 1rem;
    line-height: calc(28 * 1rem / 16);
    padding-top: calc(5 * 1rem / 16);
    padding-bottom: calc(4 * 1rem / 16);
    position: relative;
    bottom: calc(1 * 1rem / 16);
    text-wrap: nowrap;
    word-break: break-all;
  }

  .tr:hover .additional-dates {
    background-color: var(--pill-background-hover);
    color: var(--pill-color-hover);
  }

  /* -- */

  .tr.primary {
    cursor: pointer;
  }

  /* -- */

  .description {
    font-size: 1.25rem;
    line-height: 1.5;
    font-weight: 400;
  }

  .name {
    font-weight: 450;
    color: var(--table-color-highlight);
  }

  .name .title {
    font-weight: 500;
    color: var(--table-color-highlight);
  }

  .name .subtitle {
    font-weight: 400;
    color: var(--table-color);
  }

  .name,
  .date,
  .dates,
  .time,
  .times,
  .location,
  .link,
  .description,
  *[data-column-name] {
    --indent: 0.5rem;
    margin-left: var(--indent);
  }

  *[data-column-name]::before {
    content: attr(data-column-name);
  }

  .name::before {
    content: "Kurs";
  }
  .date::before,
  .dates::before {
    content: "Datum";
    content: "Datum";
  }
  .time::before,
  .times::before {
    content: "Uhrzeit";
  }
  .location::before {
    content: "Ort";
  }
  .link::before {
    content: "";
  }
  .description::before {
    content: "Beschreibung";
  }

  .name::before {
    content: "Was?";
  }
  .date::before,
  .dates::before {
    content: "Wann?";
  }
  .time::before,
  .times::before {
    content: "";
  }
  .location::before {
    content: "Wer?";
  }

  *[data-column-name]::before,
  .name::before,
  .date::before,
  .dates::before,
  .time::before,
  .times::before,
  .location::before,
  .link::before,
  .description::before {
    display: block;
    font-weight: 800;
    font-size: 14px;
    line-height: 40px;
    margin-left: calc(-1 * var(--indent));
  }

  .if-small-viewport {
    display: none;
    font-size: 1.25rem;
    position: relative;
    top: 0.15em;
  }

  .if-large-viewport {
    display: none;
  }

  @media (min-width: 1120px) {
    .if-small-viewport {
      display: none;
    }

    .if-large-viewport {
      display: inline;
    }
  }

  .link {
    margin-top: 8px;
  }

  @media (min-width: 900px) {
    .table {
      display: grid;
      grid-template-columns:
        [start name name-start] 15fr
        [datetime datetime-start name-end] 11fr
        [location location-start datetime-end] 16fr
        [link link-start location-end] 8fr
        [end link-end];
    }

    .name {
      grid-column: name;
    }
    .dates {
      grid-column: datetime;
    }
    .date {
      grid-column: datetime;
    }
    .time,
    .times {
      grid-column: datetime;
    }
    .location {
      grid-column: location;
    }
    .link {
      grid-column: link;
      margin-top: 0;
    }
    .description {
      grid-column: start / end;
    }

    .tbody,
    .thead,
    .tr-parent,
    .tr,
    .expander,
    .extended,
    .sub-table,
    .group,
    .group-header,
    details,
    summary {
      grid-column: start / end;
      display: grid;
      grid-template-columns: subgrid;
    }

    .td::before {
      content: none !important;
    }

    .name,
    .date,
    .dates,
    .time,
    .times,
    .location,
    .link {
      --indent: 0px;
    }
  }

  /** -- */

  .sub-table {
    font-weight: 300;
    /* font-size: 1.25rem; */
  }
</style>

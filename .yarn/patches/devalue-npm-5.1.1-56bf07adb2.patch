diff --git a/package.json b/package.json
index b82b55a8a5643482917fc3de88adbf538a13341d..32b239d3ef24dd015ffc1140567488d94ea43669 100644
--- a/package.json
+++ b/package.json
@@ -23,6 +23,9 @@
 		"typescript": "^3.1.3",
 		"uvu": "^0.5.6"
 	},
+	"peerDependencies": {
+		"temporal-polyfill": "*"
+	},
 	"scripts": {
 		"build": "dts-buddy",
 		"test": "uvu test",
diff --git a/src/parse.js b/src/parse.js
index f0fe2c1fa422320633915e8b36245a8d0f185f4e..ae3c4a8e57cef80e32139c023c0771cf72b67c46 100644
--- a/src/parse.js
+++ b/src/parse.js
@@ -7,6 +7,7 @@ import {
 	POSITIVE_INFINITY,
 	UNDEFINED
 } from './constants.js';
+import { Temporal } from 'temporal-polyfill';
 
 /**
  * Revive a value serialized with `devalue.stringify`
@@ -33,6 +34,20 @@ export function unflatten(parsed, revivers) {
 
 	const hydrated = Array(values.length);
 
+	const extendedRevivers = {
+		"Temporal.Instant": (str) => Temporal.Instant.from(str),
+		"Temporal.ZonedDateTime": (str) => Temporal.ZonedDateTime.from(str),
+		"Temporal.PlainDate": (str) => Temporal.PlainDate.from(str),
+		"Temporal.PlainTime": (str) => Temporal.PlainTime.from(str),
+		"Temporal.PlainDateTime": (str) => Temporal.PlainDateTime.from(str),
+		"Temporal.PlainYearMonth": (str) => Temporal.PlainYearMonth.from(str),
+		"Temporal.PlainMonthDay": (str) => Temporal.PlainMonthDay.from(str),
+		"Temporal.Duration": (str) => Temporal.Duration.from(str),
+		"Temporal.Calendar": (str) => Temporal.Calendar.from(str),
+		"Temporal.TimeZone": (str) => Temporal.TimeZone.from(str),
+		...revivers,
+	};
+
 	/**
 	 * @param {number} index
 	 * @returns {any}
@@ -56,7 +71,7 @@ export function unflatten(parsed, revivers) {
 			if (typeof value[0] === 'string') {
 				const type = value[0];
 
-				const reviver = revivers?.[type];
+				const reviver = extendedRevivers?.[type];
 				if (reviver) {
 					return (hydrated[index] = reviver(hydrate(value[1])));
 				}
diff --git a/src/stringify.js b/src/stringify.js
index df291fdf1a10d076dae1cb2dcdb717b2c9fd042f..da4d123f40b956f55ef043477bdace752e9cba75 100644
--- a/src/stringify.js
+++ b/src/stringify.js
@@ -16,6 +16,7 @@ import {
 	UNDEFINED
 } from './constants.js';
 import { encode64 } from './base64.js';
+import { Temporal } from 'temporal-polyfill';
 
 /**
  * Turn a value into a JSON string that can be parsed with `devalue.parse`
@@ -29,11 +30,25 @@ export function stringify(value, reducers) {
 	/** @type {Map<any, number>} */
 	const indexes = new Map();
 
+	const extendedReducers = {
+		"Temporal.Instant": (val) => val instanceof Temporal.Instant && val.toString(),
+		"Temporal.ZonedDateTime": (val) => val instanceof Temporal.ZonedDateTime && val.toString(),
+		"Temporal.PlainDate": (val) => val instanceof Temporal.PlainDate && val.toString(),
+		"Temporal.PlainTime": (val) => val instanceof Temporal.PlainTime && val.toString(),
+		"Temporal.PlainDateTime": (val) => val instanceof Temporal.PlainDateTime && val.toString(),
+		"Temporal.PlainYearMonth": (val) => val instanceof Temporal.PlainYearMonth && val.toString(),
+		"Temporal.PlainMonthDay": (val) => val instanceof Temporal.PlainMonthDay && val.toString(),
+		"Temporal.Duration": (val) => val instanceof Temporal.Duration && val.toString(),
+		"Temporal.Calendar": (val) => val instanceof Temporal.Calendar && val.toString(),
+		"Temporal.TimeZone": (val) => val instanceof Temporal.TimeZone && val.toString(),
+		...reducers,
+	};
+
 	/** @type {Array<{ key: string, fn: (value: any) => any }>} */
 	const custom = [];
-	if (reducers) {
-		for (const key of Object.getOwnPropertyNames(reducers)) {
-			custom.push({ key, fn: reducers[key] });
+	if (extendedReducers) {
+		for (const key of Object.getOwnPropertyNames(extendedReducers)) {
+			custom.push({ key, fn: extendedReducers[key] });
 		}
 	}
 
@@ -157,16 +172,16 @@ export function stringify(value, reducers) {
 					str = '["' + type + '","' + base64 + '"]';
 					break;
 				}
-					
+
 				case "ArrayBuffer": {
 					/** @type {ArrayBuffer} */
 					const arraybuffer = thing;
 					const base64 = encode64(arraybuffer);
-					
+
 					str = `["ArrayBuffer","${base64}"]`;
 					break;
 				}
-				
+
 				default:
 					if (!is_plain_object(thing)) {
 						throw new DevalueError(
